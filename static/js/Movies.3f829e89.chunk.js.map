{"version":3,"file":"static/js/Movies.3f829e89.chunk.js","mappings":"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","sources":["components/LinkList/LinkList.styled.js","components/LinkList/LinkList.jsx","components/LoadSpinner/LoadSpinner.styled.js","components/LoadSpinner/LoadSpinner.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","hooks/useLoader.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","../node_modules/nanoid/index.browser.js","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 10px 0;\n  padding: 0 0 0 30px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { List } from './LinkList.styled';\n\nfunction LinkList({ items, ...restProps }) {\n  return (\n    <List>\n      {items.map(item => (\n        <li key={item.key}>\n          <Link to={item.toLink} {...restProps}>\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </List>\n  );\n}\n\nLinkList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.exact({\n      key: PropTypes.number.isRequired,\n      toLink: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default LinkList;\n","import styled, { keyframes } from 'styled-components';\nimport { ImSpinner9 } from 'react-icons/im';\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(359deg);\n  }\n`;\n\nexport const LoadingIcon = styled(ImSpinner9)`\n  display: block;\n  width: 60px;\n  height: 60px;\n  margin: 30px auto;\n  color: #7a82b5;\n\n  animation: ${rotate} 1s linear infinite;\n`;\n","import { LoadingIcon } from './LoadSpinner.styled';\n\nfunction LoadSpinner() {\n  return <LoadingIcon />;\n}\n\nexport default LoadSpinner;\n","import styled from 'styled-components';\n\nexport const Container = styled.p`\n  margin: 0;\n  font-size: 20px;\n  font-weight: 400;\n`;\n","import PropTypes from 'prop-types';\nimport { Container } from './Notification.styled';\n\nfunction Notification({ message }) {\n  return <Container>{message}</Container>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState, useEffect } from 'react';\n\nimport LoadSpinner from 'components/LoadSpinner';\nimport Notification from 'components/Notification';\n\nconst STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nfunction useLoader({ callback, initData }) {\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [data, setData] = useState(initData);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      setStatus(STATUS.PENDING);\n      try {\n        const data = await callback();\n        setData(data);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        setStatus(STATUS.REJECTED);\n        setError(error);\n      }\n    })();\n  }, [callback]);\n\n  const Loader = () => {\n    if (status === STATUS.PENDING) {\n      return <LoadSpinner />;\n    }\n\n    if (status === STATUS.REJECTED) {\n      return <Notification message={error.message} />;\n    }\n\n    return null;\n  };\n\n  return { data, isLoaded: status === STATUS.RESOLVED, Loader };\n}\n\nexport default useLoader;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  position: relative;\n  margin-bottom: 30px;\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const Input = styled.input`\n  min-width: 200px;\n`;\n\nexport const SubmitBtn = styled.button`\n  margin-left: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { Form, Label, Input, SubmitBtn } from './SearchForm.styled';\n\nfunction SearchForm({ onSubmit, defValue }) {\n  const inputId = nanoid(5);\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Label htmlFor={inputId}>Movie name:</Label>\n\n      <Input\n        id={inputId}\n        type=\"text\"\n        name=\"query\"\n        placeholder=\"Search query\"\n        defaultValue={defValue}\n        required\n      />\n      <SubmitBtn type=\"submit\">Search</SubmitBtn>\n    </Form>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  defValue: PropTypes.string.isRequired,\n};\n\nexport default SearchForm;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useCallback } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchFilteredMovies, transfromResponse } from 'services/api';\n\nimport useLoader from 'hooks/useLoader';\nimport Section from 'components/Section';\nimport ItemList from 'components/LinkList';\nimport SearchForm from 'components/SearchForm';\n\nfunction Movies() {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const prevQuery =\n    searchParams.get('query') ??\n    new URLSearchParams(location.state?.from.search).get('query') ??\n    '';\n\n  const fetch = useCallback(async () => {\n    if (prevQuery === '') {\n      return [];\n    }\n\n    setSearchParams({ query: prevQuery }, { replace: true });\n    return fetchFilteredMovies(prevQuery);\n  }, [prevQuery, setSearchParams]);\n\n  let { data, isLoaded, Loader } = useLoader({\n    callback: fetch,\n    initData: [],\n  });\n\n  data = transfromResponse(data);\n\n  function onSubmit(evt) {\n    evt.preventDefault();\n    const query = evt.currentTarget.elements.query.value;\n\n    if (searchParams.get('query') === query) {\n      return;\n    }\n\n    setSearchParams({ query }, { replace: true });\n  }\n\n  return (\n    <Section title=\"Find movies\">\n      <SearchForm onSubmit={onSubmit} defValue={prevQuery} />\n\n      {isLoaded && <ItemList items={data} state={{ from: location }} />}\n\n      <Loader />\n    </Section>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '157707c22d4cc8eeebe0477c49922db6',\n    page: 1,\n  },\n});\n\nexport async function fetchAllMovies() {\n  const { data } = await axiosInstance({\n    url: '/trending/movie/day',\n  });\n\n  return data.results;\n}\n\nexport async function fetchFilteredMovies(query) {\n  const { data } = await axiosInstance({\n    url: '/search/movie',\n    params: {\n      query,\n    },\n  });\n\n  if (data.results.length === 0) {\n    throw new Error(`Not found for request: \"${query}\"`);\n  }\n\n  return data.results;\n}\n\nexport async function fetchMovieDetails(moveID) {\n  const { data } = await axiosInstance({\n    url: `/movie/${moveID}`,\n  });\n  return data;\n}\n\nexport async function fetchMovieCredits(moveID) {\n  const { data } = await axiosInstance({\n    url: `/movie/${moveID}/credits`,\n  });\n  return data.cast.slice(0, 15);\n}\n\nexport async function fetchMovieReviews(moveID) {\n  const { data } = await axiosInstance({\n    url: `/movie/${moveID}/reviews`,\n  });\n\n  if (data.results.length === 0) {\n    throw new Error('We don`t have any reviews for this movie');\n  }\n\n  return data.results;\n}\n\nexport function transfromResponse(items, baseURL = '') {\n  return items.map(item => ({\n    key: item.id,\n    label: item.title,\n    toLink: `${baseURL}${item.id}`,\n  }));\n}\n\nexport const IMG_URL_BASE = 'https://image.tmdb.org/t/p/w500';\n"],"names":["List","styled","items","restProps","map","item","to","toLink","label","key","rotate","keyframes","LoadingIcon","ImSpinner9","Container","message","STATUS","callback","initData","useState","status","setStatus","data","setData","error","setError","useEffect","isLoaded","Loader","Form","Label","Input","SubmitBtn","onSubmit","defValue","inputId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","type","name","placeholder","defaultValue","required","location","useLocation","useSearchParams","searchParams","setSearchParams","prevQuery","get","URLSearchParams","state","from","search","fetch","useCallback","query","replace","fetchFilteredMovies","useLoader","transfromResponse","Section","title","evt","preventDefault","currentTarget","elements","value","axiosInstance","axios","method","baseURL","params","api_key","page","fetchAllMovies","url","results","length","Error","fetchMovieDetails","moveID","fetchMovieCredits","cast","slice","fetchMovieReviews","IMG_URL_BASE"],"sourceRoot":""}